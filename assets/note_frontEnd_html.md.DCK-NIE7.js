import{_ as a,c as i,o as e,ae as s}from"./chunks/framework.HaEdmuUF.js";const m=JSON.parse('{"title":"HTML 部分","description":"","frontmatter":{},"headers":[],"relativePath":"note/frontEnd/html.md","filePath":"note/frontEnd/html.md","lastUpdated":1741017592000}'),t={name:"note/frontEnd/html.md"},l=s(`<h1 id="html-部分" tabindex="-1">HTML 部分 <a class="header-anchor" href="#html-部分" aria-label="Permalink to &quot;HTML 部分&quot;">​</a></h1><h2 id="_1-src和href的区别" tabindex="-1">1. src和href的区别 <a class="header-anchor" href="#_1-src和href的区别" aria-label="Permalink to &quot;1. src和href的区别&quot;">​</a></h2><h3 id="用途不同" tabindex="-1">用途不同 <a class="header-anchor" href="#用途不同" aria-label="Permalink to &quot;用途不同&quot;">​</a></h3><ul><li>src（source）用于指定嵌入到html文档的外部资源，如音视频、图片和JavaScript文件等。</li><li>href（hypetext reference）用于指定链接到html文档之外的资源，如css样式文件、字体文件或其他网页。</li></ul><h3 id="引入方式不同" tabindex="-1">引入方式不同 <a class="header-anchor" href="#引入方式不同" aria-label="Permalink to &quot;引入方式不同&quot;">​</a></h3><ul><li>src属性引入的资源是必需的，并且将在文档中占据一定的空间，可能影响文档的渲染。</li><li>href属性引用的资源是可选的，并且不会占据文档的空间，仅用于指定链接到文档之外的资源。</li></ul><h3 id="对文档的影响不同" tabindex="-1">对文档的影响不同 <a class="header-anchor" href="#对文档的影响不同" aria-label="Permalink to &quot;对文档的影响不同&quot;">​</a></h3><ul><li>src属性引用的资源是直接嵌入到文档中的，因此会影响文档的加载和呈现。</li><li>href是通过链接到外部资源来影响文档的样式和行为，只会影响到该资源的使用，而不会影响到整个文档的加载和显示。</li></ul><h2 id="_2-script标签中的defer和async的区别" tabindex="-1">2. script标签中的defer和async的区别 <a class="header-anchor" href="#_2-script标签中的defer和async的区别" aria-label="Permalink to &quot;2. script标签中的defer和async的区别&quot;">​</a></h2><p>defer和async都是异步去加载外部的js脚本文件，不会阻塞页面其他部分的解析。</p><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><ul><li>执行顺序：多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照顺序执行</li><li>执行周期：带async属性的标签与文档其他部分是并行加载和执行的，即异步执行。defer属性则是与文档其他部分并行加载，js脚本需要在文档所有元素解析完成之后才执行，即DOMContentLoaded事件触发之前执行。</li></ul><h2 id="_3-meta标签" tabindex="-1">3. meta标签 <a class="header-anchor" href="#_3-meta标签" aria-label="Permalink to &quot;3. meta标签&quot;">​</a></h2><p>meta 标签由 name 和 content 属性定义，用来描述网页文档的属性，比如网页的作者，网页描述，关键词等，除了HTTP标准固定了一些name作为大家使用的共识，开发者还可以自定义name。</p><ul><li>refresh，页面重定向和刷新</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;refresh&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0;url=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><ul><li>viewport，适配移动端，可以控制视口的大小和比例：</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h2 id="_4-web存储-缓存" tabindex="-1">4. Web存储（缓存） <a class="header-anchor" href="#_4-web存储-缓存" aria-label="Permalink to &quot;4. Web存储（缓存）&quot;">​</a></h2><p>主要指在web通信过程中将一些常用数据保存在客户端（本地），通常用于保存用户的token信息以保持登录状态，或是一些交互数据以保证用户在下次浏览时有良好的交互体验。</p><h3 id="存储方式" tabindex="-1">存储方式 <a class="header-anchor" href="#存储方式" aria-label="Permalink to &quot;存储方式&quot;">​</a></h3><ol><li>cookie</li></ol><ul><li>cookie的大小不能超过4KB</li><li>cookie默认会在会话结束时失效，也可以手动修改max-age或Expires参数来设置cookie的失效时间，前者是规定cookie在多少秒后失效，而后者则是规定cookie在某个时间点失效。如果同时设置了这两个参数，则max-age优先级更高。</li></ul><ol start="2"><li>localStorage</li></ol><ul><li>用于保存长期数据，没有过期时间，需要手动删除才能将本地存储的数据移除。</li><li>一般来说，Local Storage 的容量大约为 5-10 MB，具体取决于浏览器的实现。</li></ul><ol start="3"><li>sessionStorage</li></ol><ul><li>用于在一个浏览器标签中存储数据，数据在窗标签或窗口关闭时被清空。</li><li>与 Local Storage 类似，Session Storage 常常提供 5-10 MB 的存储空间。</li></ul><ol start="4"><li>indexedDB</li></ol>`,28),h=[l];function n(r,o,d,c,p,k){return e(),i("div",null,h)}const E=a(t,[["render",n]]);export{m as __pageData,E as default};
