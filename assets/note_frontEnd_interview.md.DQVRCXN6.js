import{_ as e,c as t,o,ae as a}from"./chunks/framework.HaEdmuUF.js";const f=JSON.parse('{"title":"面试复盘","description":"","frontmatter":{},"headers":[],"relativePath":"note/frontEnd/interview.md","filePath":"note/frontEnd/interview.md","lastUpdated":1741017592000}'),l={name:"note/frontEnd/interview.md"},r=a('<h1 id="面试复盘" tabindex="-1">面试复盘 <a class="header-anchor" href="#面试复盘" aria-label="Permalink to &quot;面试复盘&quot;">​</a></h1><h2 id="react面试题" tabindex="-1">react面试题 <a class="header-anchor" href="#react面试题" aria-label="Permalink to &quot;react面试题&quot;">​</a></h2><h3 id="_1-类组件和函数组件的区别" tabindex="-1">1. 类组件和函数组件的区别 <a class="header-anchor" href="#_1-类组件和函数组件的区别" aria-label="Permalink to &quot;1. 类组件和函数组件的区别&quot;">​</a></h3><p>类组件和函数组件是两种不同的组件实现方式，但最终的呈现效果是一致的。</p><p><strong>区别</strong></p><ol><li>设计思想</li></ol><ul><li>类组件是OOP的设计思想，因此存在继承和状态管理等</li><li>函数组件则与普通函数一致，假定输入和输出存在某种关联的话，那么相同输入必定会有相同的输出</li></ul><ol start="2"><li>写法不同</li></ol><ul><li>类组件使用类的语法进行定义，继承自 React.Component 类，需要实现 render() 方法返回 JSX；函数组件使用函数的语法定义，接收 props 对象作为参数，返回 JSX。</li></ul><ol start="3"><li>灵活性</li></ol><ul><li>函数组件通常比类组件更简洁和易于理解，适合只需要根据输入 props 渲染内容的场景， 并且可通过hooks替代类组件中的状态管理和生命周期的实现。</li></ul><p><strong>总结</strong><br> 函数组件语法更短、更简单，这使得它更容易开发、理解和测试。</p><h3 id="_2-react-hooks有哪些" tabindex="-1">2. React Hooks有哪些？ <a class="header-anchor" href="#_2-react-hooks有哪些" aria-label="Permalink to &quot;2. React Hooks有哪些？&quot;">​</a></h3><p>React Hooks 的意思是，组件尽量写成纯函数，如果需要外部功能和副作用，就用钩子把外部代码&quot;钩&quot;进来。 React Hooks 就是那些钩子。</p><ol><li>State Hook : useState、useReducer</li><li>Context Hook : useContext</li><li>Ref Hook: useRef</li><li>Effect Hook: useEffect</li><li>Performance Hook ：useMemo、useCallback</li></ol>',15),i=[r];function n(s,c,d,_,h,u){return o(),t("div",null,i)}const k=e(l,[["render",n]]);export{f as __pageData,k as default};
