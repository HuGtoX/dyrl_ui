import{_ as e,c as t,o as a,ae as c}from"./chunks/framework.HaEdmuUF.js";const p=JSON.parse('{"title":"React","description":"","frontmatter":{},"headers":[],"relativePath":"note/frontEnd/react.md","filePath":"note/frontEnd/react.md","lastUpdated":1741017592000}'),n={name:"note/frontEnd/react.md"},r=c('<h1 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h1><h2 id="react-reactelement-和-react-reactnode" tabindex="-1">React.ReactElement 和 React.ReactNode <a class="header-anchor" href="#react-reactelement-和-react-reactnode" aria-label="Permalink to &quot;React.ReactElement 和 React.ReactNode&quot;">​</a></h2><p>ReactElement 和 ReactNode 的区别：</p><ul><li>ReactElement 是 React 用于描述界面元素的具体对象。</li><li>ReactNode 则是一个更广泛的类型，可以包含 ReactElement 以及其他可渲染的内容，如字符串、数字、数组等。</li></ul><h2 id="react-cloneelement" tabindex="-1">React.cloneElement <a class="header-anchor" href="#react-cloneelement" aria-label="Permalink to &quot;React.cloneElement&quot;">​</a></h2><p>React.cloneElement 是 React 提供的一个实用函数，用于克隆并返回一个新的 React 元素。这个函数通常用于在不影响原始元素的情况下，向元素添加新的属性或替换现有的属性。这对于高阶组件（HOCs）和渲染 props 模式非常有用。</p>',6),o=[r];function l(d,s,i,_,m,R){return a(),t("div",null,o)}const f=e(n,[["render",l]]);export{p as __pageData,f as default};
