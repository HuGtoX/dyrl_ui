import{_ as s,c as a,o as i,ae as t}from"./chunks/framework.HaEdmuUF.js";const u=JSON.parse('{"title":"组件库文档开发记录","description":"","frontmatter":{},"headers":[],"relativePath":"note/extension/drylUi.md","filePath":"note/extension/drylUi.md","lastUpdated":1741017592000}'),e={name:"note/extension/drylUi.md"},n=t(`<h1 id="组件库文档开发记录" tabindex="-1">组件库文档开发记录 <a class="header-anchor" href="#组件库文档开发记录" aria-label="Permalink to &quot;组件库文档开发记录&quot;">​</a></h1><p>在Bash中，可以使用 &amp;&amp; 运算符来连接多个命令，确保前一个命令成功执行后才执行下一个命令。 例如： ls -l &amp;&amp; echo &quot;Hello, world!&quot; &amp;&amp; mkdir test</p><p>因为改组件库文档的demo需要借助ifram引入组件实例，并且在文档中需要通过环境来区分ifram要引用的地址，因此在生产环境中我们需要将打包后的组件通过命令行拷贝到部署文档所在的目录中，并设置好静态资源路径。这时候就需要在命令行中执行多个操作，以确保组件是最新的打包文件并拷贝到文档目录中。 所以我们需要再package.json中添加一个脚本，用来执行这些操作。</p><ol><li>pnpm run build</li><li>pnpm build:docs</li><li>cp -r dist/build/h5 docs/.vitepress/dist</li></ol><p>最终的写法是：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build:github:docs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm build &amp;&amp; pnpm build:docs &amp;&amp; node build/demoCopy.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,6),p=[n];function l(o,d,r,h,c,k){return i(),a("div",null,p)}const _=s(e,[["render",l]]);export{u as __pageData,_ as default};
