import{_ as e,c as t,o,ae as c}from"./chunks/framework.HaEdmuUF.js";const h=JSON.parse('{"title":"git","description":"","frontmatter":{},"headers":[],"relativePath":"note/command/git.md","filePath":"note/command/git.md","lastUpdated":1731666022000}'),i={name:"note/command/git.md"},d=c('<h1 id="git" tabindex="-1">git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;git&quot;">​</a></h1><h2 id="git-reset" tabindex="-1">git reset <a class="header-anchor" href="#git-reset" aria-label="Permalink to &quot;git reset&quot;">​</a></h2><p><code>git reset</code> 是 Git 中用于重置当前分支的指针到指定状态的一个命令。它有三种主要的模式：<code>--soft</code>、<code>--mixed</code> 和 <code>--hard</code>。每种模式都会对工作目录和暂存区有不同的影响。</p><ol><li><p><strong><code>git reset --soft &lt;commit&gt;</code></strong>：这个命令会将 HEAD 指针移动到指定的提交，同时保留暂存区和工作目录中的更改。这意味着你可以继续修改这些更改，然后再次提交。</p></li><li><p><strong><code>git reset --mixed &lt;commit&gt;</code></strong>：这是 <code>git reset</code> 的默认模式。这个命令会将 HEAD 指针移动到指定的提交，同时重置暂存区，但保留工作目录中的更改。这意味着你可以查看这些更改，然后决定是否提交它们。</p></li><li><p><strong><code>git reset --hard &lt;commit&gt;</code></strong>：这个命令会将 HEAD 指针移动到指定的提交，同时重置暂存区和工作目录，丢弃所有未提交的更改。这意味着你将丢失所有未提交的更改，所以你应该谨慎使用这个命令。</p></li></ol><p>在使用 <code>git reset</code> 时，你应该始终确保你有最新的备份，因为 <code>git reset</code> 是一个危险的操作，可能会永久性地删除你的更改。</p><p>此外，<code>git reset</code> 命令的参数 <code>&lt;commit&gt;</code> 可以是任何有效的提交引用，如提交的哈希值、分支名或标签名。如果你不指定 <code>&lt;commit&gt;</code>，那么 <code>git reset</code> 默认会重置到上一次的提交。</p>',6),a=[d];function r(s,n,g,l,m,_){return o(),t("div",null,a)}const f=e(i,[["render",r]]);export{h as __pageData,f as default};
